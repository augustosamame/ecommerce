<!-- hero -->
    <header>
      <div class="header-hero" style="cursor: pointer">
        <ul class="video-slider">
          <% Ecommerce::Slider.where(slider_view: (browser.device.mobile? ? 'MOBILE' : 'DESKTOP')).order(:slider_order).each do |slider| %>
            <% if slider.slider_image.url[-3..-1] != 'mp4' %>
              <li><img class="bximage-inside-slide clickable-slide" src="<%= slider.slider_image.url %>" title="<%= slider.slider_text %>" /></li>
            <% else %>
              <li class="video-slide clickable-slide"><video class="vid" src="<%= slider.slider_image.url %>" autoplay controls onended="nextSlide()" title="<%= slider.slider_text %>" /></li>
            <% end %>
          <% end %>
        </ul>
      </div>

          <!-- shopping videos -->
      <section class="shopping-videos">
        <div class="container-fluid">
          <h2 class="main-section-title"><%= t('.shopping_videos') %></h2>
          <div class="shopping-videos-slider">
          <% lowest_priority_video = Ecommerce::ShoppingVideo.active.order(:priority).first %>
          <% lowest_priority_video_id = lowest_priority_video.id %>
            <% Ecommerce::ShoppingVideo.active.order(:priority).each do |shopping_video| %>
              <div class="video-item">
                <div class="video-container">
                  <video
                    id="video-<%= shopping_video.id %>"
                    class="video-js vjs-fill shopping-video"
                    controls
                    preload="auto"
                    muted
                    playsinline
                    poster="<%= shopping_video.thumbnail %>"
                    data-shopping-video-id="<%= shopping_video.id %>"
                    data-shopping-video-should-autoplay="<%= shopping_video == lowest_priority_video ? 'true' : 'false' %>"
                  >
                    <source src="<%= shopping_video.video %>" type="video/mp4" />
                    <p class="vjs-no-js">
                      To view this video please enable JavaScript, and consider upgrading to a
                      web browser that <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
                    </p>
                  </video>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      </section>

      <div class="header-slider">
        <div class="container-fluid">
          <div class="brand-slider">
          
            <% Ecommerce::Brand.where(featured: true).order(:display_order).each do |brand_logo| %>
              <div class="brand-slide-div">
                <%= link_to brand_url(brand_logo.id) do %>
                <img
                  src="<%= brand_logo.logo.medium_200.url %>"
                  alt=""
                  class="img-responsive"
                />
                <% end %>
              </div>
            <% end %>

          </div>
        </div>
      </div>
    </header>
        <main>
      <!-- featured product -->
      <section class="featured-products">
        <div class="container-fluid f-product-container">
          <h2 class="main-section-title" style="font-weight: 300; font-size: 24px;"><%= t('.featured_products') %></h2>
          <div class="<%= browser.device.mobile? ? 'featured-product-slider-mobile' : 'featured-product-slider' %>"  data-thumb="https://devtechperu-expatshop-dev.s3.amazonaws.com/static/images/chevron-left.png">

            <% @featured_products.each do |product| %>
              <div>
                <div class="featured-product position-relative d-flex">
                  <%= link_to product_path(product) do %>
                    <div class="featured-product-body">
                      <% if product.show_callout %>
                        <div class="callout-label-feat">
                        <p class="callout-label-text-feat"><%= session[:locale] == 'en-PE'? product.callout_label_en : product.collout_label_es %></p>
                        </div>
                        <div class="callout-discount-feat">
                          <p class="callout-discount-text-feat"><%= session[:locale] == 'en-PE'? product.callout_discount_label_en : product.callout_discount_label_es %></p>
                        </div>
                      <% end %>
                      <img
                        src="<%= product.image.medium_400.url %>"
                        alt=""
                        class="img-responsive"
                      />
                      <div class="featured-product-info d-flex flex-center">
                        <p class="product-title"><%= product.name %></p>
                        <div class="price d-flex flex-center">
                          <% if product.price == product.discounted_price %>
                            <p class='featured-product-info-price'><%= product_session_price(product, "current_price") %></p>
                          <% else %>
                            <p class='featured-product-info-price-regular'><%= product_session_price(product, "price") %></p>
                            <p class='featured-product-info-price-discounted'><%= product_session_price(product, "current_price") %></p>
                          <% end %>
                        </div>
                      </div>
                    </div>
                  <% end %>
                  <%= simple_form_for Ecommerce::CartItem.new, remote: true, html: { class: "cart-form", id: "new_cart_item_#{product.id}" } do |f| %>
                    <%= button_tag class: "featured-add-to-cart-button" do %>
                      <%= fa_icon 'shopping-cart' %>
                      <%= t('.add_to_cart') %>
                    <% end %>
                    <%= f.hidden_field :product_id, value: product.id, id: "product_product_id_#{product.id}" %>
                    <%= f.hidden_field :quantity, value: 1, id: "devtech_quantity_field_#{product.id}" %>
                  <% end %>
                </div>
              </div>
            <% end %>

          </div>
        </div>
      </section>

      <!-- sub links for mobiles -->
      <section class="visible-xs sub-links">
        <div class="container-fluid">
          <ul class="d-flex flex-center">
            <a href="<%= products_path %>"><li><%= t('.all_the_products') %></li></a>
            <% if current_user %>
              <a href="<%= favorites_path %>"><li><%= t('.my_frequent_purchases') %></li></a>
            <% end %>
            <a href="<%= Ecommerce::Engine.routes.url_helpers.products_path(filter: 'new_products') %>"><li><%= t('.new_products') %></li></a>
            <a href="<%= Ecommerce::Engine.routes.url_helpers.products_path(filter: 'discounted_products') %>"><li><%= t('.offers_and_discounts') %></li></a>
          </ul>
        </div>
      </section>
      <!-- categories principles for mobiles -->
      <section class="visible-xs categories-principles">
        <div class="container-fluid">
          <h2 class="main-section-title"><%= t('.main_categories') %></h2>
          <div class="row" style="display: flex; justify-content: center; flex-wrap: wrap;">

            <% @primary_menu_categories.each do |category| %>
              <% unless (category.id == 64 || category.id == 47 ) %>
                <div class="col-xs-4" style="flex: 0 0 auto;">
                  <div class="principle" style="height: 200px;">
                    <%= link_to products_path(category_id: category.id) do %>
                      <div class="cat-img-wrapper">
                        <img src="<%= category.image.medium_400.url %>" class="cat-image img-responsive" alt="" />
                      </div>
                      <p><%= category.name %></p>
                    <% end %>
                  </div>
                </div>
              <% end %>
            <% end %>

          </div>
        </div>
      </section>
      <!-- testimonial -->
      <section class="testimonials">
        <div class="container-fluid">
          <h2 class="main-section-title"><%= t('.customer_testimonials') %></h2>
          <div class="testimonial-slider">

            <% Ecommerce::Testimonial.where(status: "active").order(:priority).each do |testimonial| %>
              <div>
                <div class="testimonial-body">
                  <video class="video-sizing" controls="controls" poster="<%= testimonial.thumbnail.medium_400.url %>">
                    <source
                      src="<%= testimonial.video.url %>"
                      type="video/mp4"
                    />
                  </video>
                  <div class="testimonial-info d-flex flex-center">
                    <p class="testimonial-user-name"><%= testimonial.user_fullname %> - <%= testimonial.user_title %></p>
                    <p class="testimonial-product-info">
                      <%= testimonial.product_name %>
                    </p>
                  </div>
                </div>
              </div>
            <% end %>

          </div>
        </div>
      </section>

      <style>
        .video-grid {
          display: flex;
          flex-wrap: wrap;
          justify-content: center;
          gap: 20px;
        }
        @media (max-width: 600px) {
          .video-item {
            width: 338px; /* Set fixed width */
          }
          .video-js {
            height: 460px !important;
          }
        }
        @media (min-width: 600px) {
          .video-item {
            width: 338px !important; /* Set fixed width */
          }
          .video-js {
            height: 600px !important;
          }
        }
        .video-item {
          flex: 0 0 auto;
        }
        .video-container {
          position: relative;
          width: 100%;
        }
        .video-js {
          width: 100% !important; /* Force full width */
          padding-top: 56.25% !important; /* 16:9 Aspect Ratio (100 / 16 * 9 = 56.25) */
          border-radius: 5px;
        }
        .video-js .vjs-tech {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
        }
        .video-js video {
          width: 100%;
          height: 100%;
          object-fit: contain;
        }
        .video-js .vjs-overlay {
          position: absolute;
          bottom: 30px;
          left: 0;
          right: 0;
          height: 100px;
          background-color: transparent;
          overflow-x: hidden;
          overflow-y: hidden;
          padding: 0 10px;
          display: flex;
          justify-content: flex-start;
          align-items: center;
          z-index: 2;
        }
        .video-js.vjs-fullscreen .vjs-overlay {
          bottom: 60px;
          left: 50%;
          transform: translateX(-50%);
          width: auto;
          max-width: 80%;
          justify-content: center;
        }
        .video-js.vjs-fullscreen .vjs-overlay > div {
          display: flex;
          justify-content: center;
          flex-wrap: nowrap;
          gap: 10px;
        }

        .overlay-product-overlay {
          display: none;
          padding: 0 5px;
        }
        .video-js.vjs-fullscreen .overlay-product-overlay {
          flex: 0 0 auto;
        }

        .overlay-product-card {
          width: 160px;
          height: 90px;
          background-color: white;
          border-radius: 5px;
          display: flex;
          overflow: hidden;
        }
        .overlay-product-image {
          width: 33.33%;
          height: 100%;
          object-fit: contain;
          padding-left: 2px;
        }
        .overlay-product-info {
          width: 66.67%;
          padding: 10px;
          display: flex;
          flex-direction: column;
          justify-content: space-between;
        }
        .overlay-product-title {
          font-size: 13px;
          color: #333;
          margin: 0;
          font-weight: bold;
        }
        .overlay-product-price {
          font-size: 13px;
          color: #666;
          margin: 0;
        }
        .overlay-add-to-cart {
          font-size: 13px;
          color: red;
          margin: 0;
          display: flex;
          align-items: center;
          justify-content: space-between;
          background: none;
          border: none;
          cursor: pointer;
          padding: 0;
          width: 100%;
        }
        .overlay-add-to-cart i {
          font-size: 14px;
        }
        .overlay-category-link {
          font-size: 13px;
          color: red;
          margin: 0;
          display: flex;
          align-items: center;
          justify-content: space-between;
          background: none;
          border: none;
          cursor: pointer;
          padding: 0;
          width: 100%;
        }
        .overlay-category-link i {
          font-size: 14px;
        }
        .vjs-title-overlay {
          position: absolute;
          top: 10px;
          left: 10px;
          right: 10px;
          padding: 10px;
          background-color: transparent;
          color: white;
          font-size: 18px;
          text-align: left; /* Change this to left for normal mode */
          z-index: 3;
        }
        .video-js.vjs-fullscreen .vjs-title-overlay {
          font-size: 24px;
          padding: 15px;
          text-align: center; /* Center text in fullscreen mode */
          left: 50%;
          transform: translateX(-50%);
          width: 80%;
          max-width: 177.78vh; /* 16:9 aspect ratio */
        }
        .custom-pip-container {
          position: fixed;
          bottom: 20px;
          right: 20px;
          width: 178px;
          height: 313px;
          z-index: 9999;
          display: none;
          box-shadow: 0 0 10px rgba(0,0,0,0.3);
          border-radius: 4px;
          overflow: hidden;
        }

        .custom-pip-container .video-js {
          width: 100% !important;
          height: 100% !important;
          padding-top: 0 !important;
        }

        /* Scale down overlays for PIP */
        .custom-pip-container .vjs-overlay {
          transform: scale(0.5);
          transform-origin: bottom left;
          bottom: 10px !important; /* Adjust this value to position the overlay 20px from the bottom in the PIP view */
        }

        .custom-pip-container .overlay-product-card {
          width: 80px; /* Half of the original width */
          height: 45px; /* Half of the original height */
        }

        .custom-pip-container .overlay-product-image {
          width: 33.33%;
          height: 100%;
        }

        .custom-pip-container .overlay-product-info {
          width: 66.67%;
          padding: 5px;
        }

        .custom-pip-container .overlay-product-title,
        .custom-pip-container .overlay-product-price,
        .custom-pip-container .overlay-add-to-cart,
        .custom-pip-container .overlay-category-link {
          font-size: 6.5px; /* Half of the original font size */
        }
        .custom-pip-close,
        .custom-pip-fullscreen,
        .custom-pip-mute {
          position: absolute;
          background: rgba(0,0,0,0.5);
          color: white;
          border: none;
          border-radius: 50%;
          cursor: pointer;
          z-index: 10000;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        .custom-pip-close {
          top: 5px;
          right: 5px;
          width: 24px;
          height: 24px;
          font-size: 18px;
        }
        .custom-pip-fullscreen {
          top: 35px !important;
          right: 8px !important;
          width: 24px !important;
          height: 24px !important;
          font-size: 28px !important;
        }
        .custom-pip-mute {
          top: 75px !important;
          right: 8px !important;
          width: 24px !important;
          height: 24px !important;
          font-size: 24px !important;
        }
        .custom-pip-mute:before {
          content: '♪';  /* Unicode character for eighth note */
        }

        .custom-pip-mute.muted:before {
          content: '♪̸';  /* Unicode character for eighth note with a slash */
        }
        .custom-pip-fullscreen:before {
          content: '⤢';
        }
        .vjs-picture-in-picture-control {
          display: none !important;
        }
        .vjs-pip-button {
            cursor: pointer;
            color: white;
          }
        .vjs-pip-button:before {
          content: "PIP";
          font-family: Arial, sans-serif;
          font-weight: bold;
        }
      </style>

      <script>
      document.addEventListener('DOMContentLoaded', function() {
        var players = [];
        var customPipContainer = document.createElement('div');
        customPipContainer.className = 'custom-pip-container';
        var closeButton = document.createElement('button');
        closeButton.className = 'custom-pip-close';
        closeButton.innerHTML = '×';
        customPipContainer.appendChild(closeButton);
        document.body.appendChild(customPipContainer);
        var activePlayer = null;
        var isPipActive = false;
        var pipManuallyClosed = false;

        function setupCustomPipFunctionality(player) {
          var pipButton = player.controlBar.addChild('button', {
            clickHandler: function(event) {
              if (customPipContainer.style.display === 'block') {
                exitCustomPip();
              } else {
                enterCustomPip(player);
              }
            }
          });

          var pipButtonDom = pipButton.el();
          pipButtonDom.classList.add('vjs-pip-button');
          pipButtonDom.title = 'Picture in Picture';
        }

        function enterCustomPip(player) {
          if (!player || typeof player.el !== 'function') {
            console.error('Invalid player object');
            return;
          }

          customPipContainer.style.display = 'block';
          
          try {
            // Clone the player
            var pipPlayer = player.el().cloneNode(true);
            pipPlayer.id = 'pip-' + player.el().id;
            customPipContainer.appendChild(pipPlayer);

            // Initialize the cloned player
            var pipPlayerInstance = videojs(pipPlayer.id, {
              muted: player.muted(),
              autoplay: true
            });

            if (!pipPlayerInstance || typeof pipPlayerInstance.currentTime !== 'function') {
              throw new Error('Failed to initialize PIP player');
            }

            // Sync the time of the PIP player with the main player
            pipPlayerInstance.currentTime(player.currentTime());

            // Always play the PIP video
            pipPlayerInstance.play().catch(e => console.error('Failed to play PIP video:', e));

            // Sync muted state and volume
            pipPlayerInstance.muted(player.muted());
            pipPlayerInstance.volume(player.volume());

            // Scale down overlays for PIP
            var pipOverlay = pipPlayerInstance.el().querySelector('.vjs-overlay');
            if (pipOverlay) {
              pipOverlay.style.transform = 'scale(0.5)';
              pipOverlay.style.transformOrigin = 'bottom left';
              pipOverlay.style.bottom = '10px';
            }

            // Add fullscreen button
            var fullscreenButton = document.createElement('button');
            fullscreenButton.className = 'custom-pip-fullscreen';
            fullscreenButton.title = 'Switch to fullscreen';
            fullscreenButton.addEventListener('click', function() {
              var currentTime = pipPlayerInstance.currentTime();
              var isPlaying = !pipPlayerInstance.paused();
              exitCustomPip();
              player.currentTime(currentTime);
              if (isPlaying) {
                player.play().catch(e => console.error('Failed to play main video:', e));
              }
              player.requestFullscreen();
            });
            pipPlayerInstance.el().appendChild(fullscreenButton);

            // Add mute/unmute button
            var muteButton = document.createElement('button');
            muteButton.className = 'custom-pip-mute';
            muteButton.title = 'Toggle mute';
            muteButton.classList.toggle('muted', pipPlayerInstance.muted());
            muteButton.addEventListener('click', function() {
              pipPlayerInstance.muted(!pipPlayerInstance.muted());
              muteButton.classList.toggle('muted', pipPlayerInstance.muted());
              player.muted(pipPlayerInstance.muted()); // Sync mute state with original player
            });
            pipPlayerInstance.el().appendChild(muteButton);

            // Store reference to original player
            pipPlayerInstance.originalPlayer = player;

            closeButton.addEventListener('click', function() {
              exitCustomPip();
              pipManuallyClosed = true;
            });

          } catch (error) {
            console.error('Error in enterCustomPip:', error);
            customPipContainer.style.display = 'none';
          }
        }

        function exitCustomPip() {
          var pipPlayer = customPipContainer.querySelector('.video-js');
          if (pipPlayer) {
            try {
              var pipPlayerInstance = videojs(pipPlayer.id);
              var originalPlayer = pipPlayerInstance.originalPlayer;
              
              if (originalPlayer && typeof originalPlayer.currentTime === 'function') {
                originalPlayer.currentTime(pipPlayerInstance.currentTime());
                
                if (!pipPlayerInstance.paused()) {
                  originalPlayer.play().catch(e => console.error('Failed to play original video:', e));
                }
              }

              pipPlayerInstance.dispose();
            } catch (error) {
              console.error('Error in exitCustomPip:', error);
            }
          }
          customPipContainer.style.display = 'none';
          customPipContainer.innerHTML = '';
          customPipContainer.appendChild(closeButton);
          isPipActive = false;
          activePlayer = null;
        }

        function checkPlayerVisibility(player) {
          if (isPipActive || pipManuallyClosed) return;

          var rect = player.el().getBoundingClientRect();
          var windowHeight = window.innerHeight || document.documentElement.clientHeight;
          
          var visiblePercentage = (Math.min(rect.bottom, windowHeight) - Math.max(rect.top, 0)) / rect.height;

          if (visiblePercentage < 0.2 && !player.paused() && player !== activePlayer) {
            enterCustomPip(player);
            activePlayer = player;
            isPipActive = true;
          }
        }

        var scrollDebounceTimer;
        window.addEventListener('scroll', function() {
          clearTimeout(scrollDebounceTimer);
          scrollDebounceTimer = setTimeout(function() {
            players.forEach(checkPlayerVisibility);
          }, 100);
        });

        function setupOverlayInteractions(overlay, player) {
          overlay.el().querySelectorAll('.overlay-product-overlay').forEach(function(productOverlay) {
            productOverlay.addEventListener('click', function(e) {
              // Prevent default action for "Add to Cart" button and category link
              if (e.target.closest('.overlay-add-to-cart') || e.target.closest('.overlay-category-link')) {
                return;
              }

              e.preventDefault();
              var overlayType = this.dataset.overlayType;
              var productId = this.dataset.productId;
              var categoryId = this.dataset.categoryId;

              if (overlayType === 'product' && productId) {
                fetch('/store/cart_items', {
                  method: 'POST',
                  body: JSON.stringify({
                    cart_item: {
                      product_id: productId,
                      quantity: 1
                    }
                  }),
                  headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                  },
                  credentials: 'same-origin'
                })
                .then(response => response.text())
                .then(responseText => {
                  eval(responseText);
                })
                .catch(error => {
                  console.error('Error adding product to cart:', error);
                });
              } else if (overlayType === 'category' && categoryId) {
                window.location.href = `/store/products?category_id=${categoryId}`;
              }
            });
          });
        }

        window.videoPlayers = {};


        function initializeVideoPlayers() {
          var videoElements = document.querySelectorAll('.shopping-video');
          videoElements.forEach(function(videoElement, index) {
            var shoppingVideoId = videoElement.dataset.shoppingVideoId;
            var shouldAutoplay = videoElement.dataset.shoppingVideoShouldAutoplay === 'true';

            var player = videojs('video-' + shoppingVideoId, {
              muted: true,
              autoplay: false,
              playsinline: true,
              controls: true,
              nativeControlsForTouch: false
            });

            window.videoPlayers[shoppingVideoId] = player;

            player.on('loadedmetadata', function() {
              console.log('Player is ready for video', shoppingVideoId);
      
              // Safely set attributes
              if (player.tech_ && player.tech_.el_) {
                console.log('setting playsinline')
                player.tech_.el_.setAttribute('playsinline', '');
                player.tech_.el_.setAttribute('webkit-playsinline', '');
              }

              // Disable full-screen button if it exists
              if (player.controlBar && player.controlBar.fullscreenToggle) {
                player.controlBar.fullscreenToggle.hide();
              }

              // Attempt to play the video
              if (shouldAutoplay) {
                console.log('Attempting shouldAutoplay for video', shouldAutoplay, shoppingVideoId);
                player.muted(true);
                var playPromise = player.play();
                
                console.log('player', player)
                
                if (playPromise !== undefined) {
                  console.log('player is ready? 0 means no', player.readyState())
                  console.log('player paused?', player.paused())
                  playPromise.then(() => {
                      console.log('Autoplay started successfully for video', shoppingVideoId);
                    })
                    .catch((error) => {
                      console.error('Autoplay prevented for video', shoppingVideoId, error);
                      // Show a "Play" button or custom thumbnail
                      if (player.posterImage) player.posterImage.show();
                      if (player.bigPlayButton) player.bigPlayButton.show();
                    });
                } else {
                  console.log('Play promise is undefined for video', shoppingVideoId);
                }
              } else {
                console.log('Autoplay not attempted for video', shoppingVideoId);
              }

              setupCustomPipFunctionality(player);
              setupOverlays(player, shoppingVideoId);
            });
          });
        }

        function setupOverlays(player, shoppingVideoId) {
          // Add title overlay
          fetch(`/store/shopping_videos/${shoppingVideoId}`)
            .then(response => response.json())
            .then(videoData => {
              var titleOverlayContent = `
                <div class="vjs-title-overlay">
                  ${videoData.title}
                </div>
              `;

              var titleOverlay = player.addChild('component', {
                el: player.addChild('component').el()
              });
              titleOverlay.el().innerHTML = titleOverlayContent;
            })
            .catch(error => {
              console.error('Error fetching video title:', shoppingVideoId, error);
            });

          // Product and category overlay code
          fetch(`/store/shopping_videos/${shoppingVideoId}/overlays`)
            .then(response => response.json())
            .then(overlays => {
              var overlayContent = `
                <div class="vjs-overlay">
                  ${overlays.map(overlay => `
                    <div class="overlay-product-overlay mx-2" 
                         data-overlay-type="${overlay.overlay_type}"
                         data-product-id="${overlay.overlay_type === 'product' ? overlay.product_id : ''}" 
                         data-category-id="${overlay.overlay_type === 'category' ? overlay.category_id : ''}"
                         data-start-time="${overlay.start_time}" 
                         data-end-time="${overlay.end_time}">
                      <div class="overlay-product-card">
                        <img src="${overlay.overlay_type === 'product' ? overlay.product_image_url : overlay.category_image_url}" 
                             class="overlay-product-image" 
                             alt="${overlay.overlay_type === 'product' ? overlay.product_name : overlay.category_name}">
                        <div class="overlay-product-info">
                          <p class="overlay-product-title">
                            ${(overlay.overlay_type === 'product' ? overlay.product_name : overlay.category_name).substring(0, 20)}
                          </p>
                          ${overlay.overlay_type === 'product' ?
                            `<p class="overlay-product-price">${overlay.product_price}</p>
                             <button class="overlay-add-to-cart">
                               <span class="overlay-add-to-cart">${overlay.add_to_cart_label}</span> <i class="fas fa-arrow-right"></i>
                             </button>` :
                            `<a href="/store/products?category_id=${overlay.category_id}" class="overlay-category-link">
                               ${overlay.view_products_label}
                             </a>`
                          }
                        </div>
                      </div>
                    </div>
                  `).join('')}
                </div>
              `;

              var overlay = player.addChild('component', {
                el: player.addChild('component').el()
              });
              overlay.el().innerHTML = overlayContent;

              setupOverlayInteractions(overlay, player);

              player.on('timeupdate', function() {
                var currentTime = player.currentTime();
                overlay.el().querySelectorAll('.overlay-product-overlay').forEach(function(productOverlay) {
                  var startTime = parseFloat(productOverlay.dataset.startTime);
                  var endTime = parseFloat(productOverlay.dataset.endTime);
                  if (currentTime >= startTime && currentTime <= endTime) {
                    productOverlay.style.display = 'block';
                  } else {
                    productOverlay.style.display = 'none';
                  }
                });
              });
            })
            .catch(error => {
              console.error('Error fetching overlays for video:', shoppingVideoId, error);
            });
        }

        initializeVideoPlayers();
      });
      </script>

      <!-- country mosaic -->
      <section class="global-products">
        <div class="container-fluid">
          <h2 style="font-size: 2.5rem;"><%= t('.products_from_the_world') %></h2>
          <!-- countries for desktop -->
          <div id="country-mosaic">

            <% Ecommerce::Category.where(mosaic_show: true).active.order(:category_order).each do |category| %>
              <div>
              <a href="<%= products_path(category_id: category.id) %>" >
                <div class="country-div" style="background-image: url(<%= category.image_popular_homepage.homepage.url %>)">
                <p><%= category.mosaic_label_en %></p>
                </div>
              </a>
              </div>
            <% end %>
           
          </div>
        </div>
      </section>

      <!-- offer -->
      <section class="offer">
        <div class="container">
          <div class="row">
            <div class="col-xs-7 col-md-8">
              <p>Día 1: <span>El Comercio</span></p>
              <h3>Expatshop y su apuesta por crecer en el Perú</h3>
              <p class="hidden-xs">
                Conoce un poco más de la importadora que, en el siguiente quinquenio,
espera que su tienda pueda ofrecer 15,000 productos de diferentes
categorías.
              </p>
            </div>
            <div class="col-xs-5 col-md-4 position-relative">
              <%= image_tag "ecommerce/img/expatshop/offer.png", class: "img-responsive" %>
              <h4 class="pe">.pe</h4>
            </div>
            <div class="btn-group">
              <button onclick="window.location.href='https://elcomercio.pe/economia/expatshop-la-importadora-de-productos-de-consumo-masivo-que-concentrara-sus-esfuerzos-en-peru-vendiendo-al-precio-de-origen-noticia/'" class="main-btn"><%= t('.read_article') %></button>
              <button class="main-btn white"><%= t('.press') %></button>
            </div>
          </div>
        </div>
      </section>
    </main>

<script>

  function nextSlide() {
    slider.goToNextSlide();
  }

  $(document).ready(function () {

    var buttons_visible = <%= !browser.device.mobile? %>;
    var bx = $('.video-slider').bxSlider(
      {
        mode: 'horizontal',
        auto: true,
        //autoControls: true,
        //captions: true,
        //stopAutoOnClick: true,
        slideWidth: 2560,
        video: true,
        infiniteLoop: true,
        adaptiveheight: true,
        // startSlide: 0,
        // speed: 5000,
        // useCSS: false,
        // responsive: true,
        autoHover: true,
        autoDelay: 5000,
        controls: buttons_visible,
        autostart: true,
        //onSliderLoad: function(currentIndex) {
        //  $("video").trigger("play");
        //},
        //onSlideBefore: function(slide) {
        //  bx.stopAuto;
        //  console.log('Stop Auto')
        //}

        

        onSlideAfter: function ($slideElement, oldIndex, newIndex) {
          if ($slideElement.hasClass('video-slide')) {
            var currentSlideId = $slideElement.attr('id');
            var video = $slideElement.find('video').get(0);
            video.addEventListener('ended', function () {
              slider.goToNextSlide();
            });
          }
        }
        
      }
    );

    $(document).on('click', '.header-hero', function () {
      if (!$(event.target).hasClass('bx-next') && !$(event.target).hasClass('bx-prev') && !$(event.target).closest('.bx-controls').length) {
        console.log('clicked on slider')
        var currentSlideIndex = bx.getCurrentSlide();
        var string_array = "<%= browser.device.mobile? ? @mobile_slider_array : @desktop_slider_array %>".replace(/&quot;/g,'"')
        var parsed_array = JSON.parse(string_array)
        console.log('parsed_array: ', parsed_array)
        redirect_string = parsed_array[currentSlideIndex]
        console.log('redirect_string: ', redirect_string)
        if (redirect_string != null && redirect_string != undefined && redirect_string != "" && redirect_string != "null" && redirect_string != "undefined" && redirect_string != "NULL" && redirect_string != "UNDEFINED") {
          window.location.href = redirect_string;
        }
        
      }
    });

  })

</script>
